#!/usr/bin/env python3
#
# Create a merge request to fdroid/fdroidserver with new
# version/checksum info. This assumes that the transparency log process
# ran and found new info.

import git
import json
import os
import re
from colorama import Fore, Style
from packaging.version import Version


with open('../checksums.json', encoding='utf8') as fp:
    checksums = json.load(fp)

versions = dict()
gradle_bin_pat = re.compile(r'gradle-([0-9][0-9.]+[0-9])-bin.zip')
for url, d in checksums.items():
    m = gradle_bin_pat.search(url)
    if m:
        versions[m.group(1)] = d[0]['sha256']

errors = 0
makebuildserver = os.path.join(os.getcwd(), 'makebuildserver')
with open(makebuildserver, encoding='utf8') as fp:
    makebuildserver_current = fp.read()
to_compile = re.search(r'CACHE_FILES = [^\]]+\]', makebuildserver_current).group()
code = compile(to_compile, makebuildserver, 'exec')
config = {}
exec(code, None, config)  # nosec this is just a CI script pylint: disable=exec-used
makebuildserver_versions = []
version_pat = re.compile(r'[0-9]+(\.[0-9]+)+')
for url, checksum in config['CACHE_FILES']:
    if 'gradle.org' in url:
        m = version_pat.search(url.split('/')[-1])
        if m:
            makebuildserver_versions.append(m.group())
            if checksum != versions[m.group()]:
                print(
                    Fore.RED + 'ERROR: checksum mismatch:',
                    checksum,
                    versions[m.group()] + Style.RESET_ALL,
                )
                errors += 1

# error if makebuildserver is missing the latest version
for version in sorted(versions.keys()):
    if version not in makebuildserver_versions and Version(version) > Version(
        sorted(makebuildserver_versions)[-1]
    ):
        add_before = """    ('https://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin',"""
        new = to_compile.replace(
            add_before,
            "    ('https://services.gradle.org/distributions/gradle-"
            + version
            + "-bin.zip',\n"
            "     '" + versions[version] + "'),\n" + add_before,
        )
        makebuildserver_current = makebuildserver_current.replace(to_compile, new)

with open(makebuildserver, 'w', encoding='utf8') as fp:
    fp.write(makebuildserver_current)

# write out update to gradlew-fdroid
with open('gradlew-fdroid', encoding='utf8') as fp:
    gradlew_fdroid = fp.read()
current = ''
get_sha_pat = re.compile(r""" +'([0-9][0-9.]+[0-9])'\)\s+echo '([0-9a-f]{64})' ;;\n""")
for m in get_sha_pat.finditer(gradlew_fdroid):
    current += m.group()
    checksum = m.group(2)
    if checksum != versions[m.group(1)]:
        print(
            Fore.RED + 'ERROR: checksum mismatch:',
            checksum,
            versions[m.group(1)] + Style.RESET_ALL,
        )
        errors += 1
new = ''
for version in sorted(versions.keys(), key=Version):
    sha256 = versions[version]
    spaces = ''
    for i in range(6 - len(version)):
        spaces += ' '
    new += f"""        '{version}'){spaces} echo '{sha256}' ;;\n"""
gradlew_fdroid = gradlew_fdroid.replace(current, new)
plugin_v = ' '.join(sorted(versions.keys(), key=Version, reverse=True))
plugin_v_pat = re.compile(r'\nplugin_v=\(([0-9. ]+)\)')
with open('gradlew-fdroid', 'w', encoding='utf8') as fp:
    fp.write(plugin_v_pat.sub(f'\nplugin_v=({plugin_v})', gradlew_fdroid))

git_repo = git.repo.Repo('.')
branch = git_repo.create_head(os.path.basename(__file__), force=True)
branch.checkout()
git_repo.index.add(['gradlew-fdroid', 'makebuildserver'])
author = git.Actor('fdroid-bot', 'fdroid-bot@f-droid.org')
git_repo.index.commit('gradle v' + version, author=author)

ci_job_id = os.getenv('CI_JOB_ID')
description = (
    'see <https://gitlab.com/fdroid/gradle-transparency-log/-/blob/master/checksums.json>'
    f"""<br><p><small>generated by <a href="{os.getenv('CI_PROJECT_URL')}/-/jobs/{ci_job_id}">GitLab CI Job #{ci_job_id}</a></small></p>"""
)

push_options = [
    'merge_request.create',
    'merge_request.remove_source_branch',
    f'merge_request.title=bot: update to gradle v{version}',
    f'merge_request.description={description}',
]
progress = git.RemoteProgress()
remote = git.remote.Remote(git_repo, 'origin')
pushinfos = remote.push(
    branch.name,
    progress=progress,
    force=True,
    set_upstream=True,
    push_option=push_options,
)

for pushinfo in pushinfos:
    print(pushinfo.summary)
    # Show potentially useful messages from git remote
    if progress:
        for line in progress.other_lines:
            print(line)
    if pushinfo.flags & (
        git.remote.PushInfo.ERROR
        | git.remote.PushInfo.REJECTED
        | git.remote.PushInfo.REMOTE_FAILURE
        | git.remote.PushInfo.REMOTE_REJECTED
    ):
        print(f'{remote.url} push failed: {pushinfo.flags} {pushinfo.summary}')
    else:
        print(remote.url + ': ' + pushinfo.summary)
